name: build-and-release

on:
  push:
    tags:
      - '*'
      # - '!*-alpha*'

permissions:
  contents: write

jobs:
  frontend_build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4.1.0
        with:
          node-version: '>=22'

      - name: 安装依赖并构建前端
        env:
          CI: ""
        run: |
          cd web
          npm install -g pnpm
          pnpm install
          VITE_REACT_APP_VERSION=$(git describe --tags) pnpm run build
          cd ..

      - name: 上传前端构建产物
        uses: actions/upload-artifact@v4.4.3
        with:
          name: frontend-build
          path: web/dist

  backend_build:
    needs: frontend_build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
            output_name: one-api
            cgo_enabled: 0
            ldflags: "-s -w -X 'one-api/common.Version=$(git describe --tags)' -extldflags '-static'"

          - os: ubuntu-latest
            arch: arm64
            goos: linux
            goarch: arm64
            output_name: one-api-arm64
            cgo_enabled: 1
            ldflags: "-s -w -X 'one-api/common.Version=$(git describe --tags)' -extldflags '-static'"
            cc: aarch64-linux-gnu-gcc
            extra: " -tags \"osusergo netgo\""

          - os: macos-latest
            arch: amd64
            goos: darwin
            goarch: amd64
            output_name: one-api-macos
            cgo_enabled: 0
            ldflags: "-s -w -X 'one-api/common.Version=$(git describe --tags)'"

          - os: windows-latest
            arch: amd64
            goos: windows
            goarch: amd64
            output_name: one-api.exe
            cgo_enabled: 0
            ldflags: "-s -w -X 'one-api/common.Version=$(git describe --tags)'"

    runs-on: ${{ matrix.os }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: 下载前端构建产物
        uses: actions/download-artifact@v4.1.8
        with:
          name: frontend-build
          path: web/dist

      - name: 设置 Go 环境
        uses: actions/setup-go@v5.1.0
        with:
          go-version: '>=1.20.0'

      - name: 安装依赖（仅限 Ubuntu arm64）
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: 构建后端
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.cgo_enabled }}
          OUTPUT_NAME: ${{ matrix.output_name }}
          CC: ${{ matrix.cc || '' }}
        shell: bash
        run: |
          if [ -n "$CC" ]; then
            export CC=$CC
          fi
          go mod download
          go build -trimpath${{ matrix.extra || '' }} -ldflags "${{ matrix.ldflags }}" -o $OUTPUT_NAME

      - name: 上传构建产物
        uses: actions/upload-artifact@v4.4.3
        with:
          name: ${{ matrix.output_name }}
          path: ${{ matrix.output_name }}

  publish_release:
    needs: backend_build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: one-api*
          merge-multiple: true
          path: artifacts

      - name: 发布到 GitHub
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2.0.9
        with:
          files: artifacts/one-api*
          draft: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}